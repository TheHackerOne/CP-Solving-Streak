#include <iostream>
#include<bits/stdc++.h>
using namespace std;

//Single Source Shortest Path

template<typename T>
class Graph{
    
    map<T, list<T>> adjList;
    
    public:
    
    Graph(){
        
    }
    
    void addEdge(T u, T v, bool biDir = true){
        adjList[u].push_back(v);
        if(biDir){
            adjList[v].push_back(u);
        }
    }
    
    void printEdgeList(){
        for(auto i:adjList){
            cout<<i.first<<" -> ";
            for(auto vertex:i.second)
                cout<<vertex<<" ";
            cout<<endl;    
        }
            cout<<endl;    
    }

        
    void bfsTopologicalSort(){
        map<T, bool> visited;
        map<T, int> indegree;
        queue<T> q;
        
        for(auto i:adjList){
            T node = i.first;
            visited[node] = false;
            indegree[node] = 0;
        }
        
        for(auto u:adjList){
            T node = u.first;
            for(auto v:adjList[node]){
                indegree[v]++;
            }
        }
        
        for(auto i:adjList){
            T node = i.first;
            if(indegree[node] == 0){
                q.push(node);
            }
        }
        
        while(!q.empty()){
            T node = q.front();
            cout<<node<<" ";
            q.pop();
            for(auto i:adjList[node]){
                indegree[i]--;
                if(indegree[i] == 0)
                    q.push(i);
            }
        }
    }
};

int main(){
    
    Graph<string> g2;
    
    g2.addEdge("English", "Programming Logic", false);
    g2.addEdge("Maths", "Programming Logic", false);
    g2.addEdge("Programming Logic", "HtML", false);
    g2.addEdge("Programming Logic", "Python", false);
    g2.addEdge("Programming Logic", "Java", false);
    g2.addEdge("Programming Logic", "Js", false);
    g2.addEdge("Python", "Web Dev", false);
    g2.addEdge("HtML", "Css", false);
    g2.addEdge("Css", "Js", false);
    g2.addEdge("Js", "Web Dev", false);
    g2.addEdge("Java", "Web Dev", false);
    g2.addEdge("Python", "Web Dev", false);
    
    
    g2.printEdgeList();
    
    g2.bfsTopologicalSort();
    
    return 0;
}
