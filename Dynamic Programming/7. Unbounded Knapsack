#include <iostream>
#include<bits/stdc++.h>
using namespace std;

int n, W;
// unbounded knapsack
int unboundedKnapsack(int w[], int p[], int W, int n){
    if(W == 0 || n == 0)
        return 0;
        
    if(w[n-1] > W)
        return unboundedKnapsack(w, p, W, n-1);
    else if(w[n-1] <= W)
        return max(unboundedKnapsack(w, p, W, n-1), p[n-1] + unboundedKnapsack(w, p, W-w[n-1], n));
        
}

int main() {
	cin>>n>>W;
	int w[n], p[n];
	for(int i=0;i<n;i++)
	    cin>>w[i];
	    
	for(int i=0;i<n;i++)
	    cin>>p[i];
	    
	cout<<unboundedKnapsack(w, p, W, n);    
	return 0;
}
