#include <iostream>
#include<bits/stdc++.h>
using namespace std;

template<typename T>
class Graph{
    
    map<T, list<T>> adjList;
    
    public:
    
    Graph(){
        
    }
    
    void addEdge(T u, T v, bool biDir = true){
        adjList[u].push_back(v);
        if(biDir){
            adjList[v].push_back(u);
        }
    }
    
    void printEdgeList(){
        for(auto i:adjList){
            cout<<i.first<<" -> ";
            for(auto vertex:i.second)
                cout<<vertex<<" ";
            cout<<endl;    
        }
    }
    
    void bfs(T src){
        queue<T> q;
        map<T, bool> visited;
        
        q.push(src);
        visited[src] = true;
        
        while(!q.empty()){
            int node = q.front();
            cout<<node<<" ";
            q.pop();
            for(int neighbour: adjList[node]){
                if(!visited[neighbour]){
                    q.push(neighbour);
                    visited[neighbour] = true;
                }
            }
        }
    }
};

int main(){
    
    Graph<int> g2;
    
    g2.addEdge(0, 1);
    g2.addEdge(1, 2);
    g2.addEdge(0, 4);
    g2.addEdge(2, 4);
    g2.addEdge(2, 3);
    g2.addEdge(3, 5);
    g2.addEdge(3, 4);
    
    g2.printEdgeList();
    
    g2.bfs(0);
    
    return 0;
}
