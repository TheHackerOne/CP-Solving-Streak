#include <iostream>
#include<bits/stdc++.h>
using namespace std;

//Single Source Shortest Path

template<typename T>
class Graph{
    
    map<T, list<T>> adjList;
    
    public:
    
    Graph(){
        
    }
    
    void addEdge(T u, T v, bool biDir = true){
        adjList[u].push_back(v);
        if(biDir){
            adjList[v].push_back(u);
        }
    }
    
    void printEdgeList(){
        for(auto i:adjList){
            cout<<i.first<<" -> ";
            for(auto vertex:i.second)
                cout<<vertex<<" ";
            cout<<endl;    
        }
            cout<<endl;    
    }

        
    bool isCyclicUndirectedGraph(T src){
        map<T, bool> visited;
        queue<T> q;
        map<T, int> parent;
        q.push(src);
        visited[src] = true;
        parent[src] = src;
        
        while(!q.empty()){
            T node = q.front();
            cout<<node<<" ";
            q.pop();
            for(auto neighbour:adjList[node]){
                if(visited[neighbour] && parent[node] != neighbour){
                    return true;
                }
                else if(!visited[neighbour]){
                    q.push(neighbour);
                    visited[neighbour] = true;
                    parent[neighbour] = node;
                }
                
            }
        }
        return false;
    }
};

int main(){
    
    Graph<int> g2;
    
    g2.addEdge(1,2);
    g2.addEdge(1,4);
    g2.addEdge(4,3);
    g2.addEdge(2,3);
    
    
    g2.printEdgeList();
    
    if(g2.isCyclicUndirectedGraph(1)){
        cout<<"Graph contains a cycle";
    }else{
        cout<<"Graph does not contain a cycle";
    }
    
    return 0;
}
