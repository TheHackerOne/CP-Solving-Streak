class Solution {
public:
    bool helper(vector<int> &arr){
  sort(arr.begin(), arr.end());
  unordered_map<int, int> mp;
  for(int i=0;i<arr.size();i++){
    mp[arr[i]]++;
  }

  for(int i=0;i<arr.size();i++){
    int num = arr[i];
    int doubNum = arr[i]*2;
    if(mp.find(num) != mp.end()){
      if(mp.find(doubNum) != mp.end()){
        if(mp[doubNum] >= mp[num]){
          mp[doubNum] -= mp[num];
          mp.erase(num);
          if(mp[doubNum] == 0) mp.erase(doubNum);
        }else return false;
      }else return false;
    }
  }
  return true;
}

bool canReorderDoubled(vector<int>& arr) {

  if(arr.size()%2) return false;

  int negCnt = 0;
  for(auto i:arr){
    if(i < 0) negCnt++;
  }
  if(negCnt%2) return false;

  vector<int> arr1, arr2;
  for(int i=0;i<arr.size();i++){
    if(arr[i] >= 0) arr1.push_back(arr[i]);
    else arr2.push_back(-arr[i]);
  }

  bool res1 = helper(arr1);
  bool res2 = helper(arr2);
  return res1 and res2;
}
   
};