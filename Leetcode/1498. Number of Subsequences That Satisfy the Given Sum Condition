class Solution {
private:
    int MOD = 1e9+7;
    
    int pow(int x, int n){
        if(n == 0) return 1;
        if(n == 1) return x;
        
        int res = pow(x, n/2);
        if(n%2) return (1LL*(res%MOD)*(res%MOD)*(x%MOD))%MOD;
        else return (1LL*(res%MOD)*(res%MOD))%MOD;
    }
public:
    int numSubseq(vector<int>& nums, int target) {
        sort(nums.begin(), nums.end());
        int n = nums.size();
        int cnt = 0;
        for(int i=0;i<nums.size();i++){
            int mini = nums[i];
            int l = i, h = n-1;
            int res = -1;
            while(l <= h){
                int mid = (l+h)/2;
                int sum = mini + nums[mid];
                if(sum <= target){
                    res = mid;
                    l = mid+1;
                }else{
                    h = mid-1;
                }
            }
            if(res != -1){
                int len = res-i;
                cnt = (cnt%MOD) + (pow(2, len)%MOD);
            }
        }
        return cnt;
    }
};