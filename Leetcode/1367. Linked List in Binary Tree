
class Solution {
private:
    int lenLL(ListNode *head){
        int len = 0;
        while(head){
            len++;
            head = head->next;
        }
        return len;
    }
    
    bool helper(ListNode* head, TreeNode* root, vector<int> &path, int &len){
        if(root == nullptr) return false;
        if(root->left == nullptr and root->right == nullptr){
            path.push_back(root->val);
            int n = path.size();
            for(int i=0;i<=n-len;i++){
                ListNode *curr = head;
                int idx = i;
                while(curr and curr->val == path[idx]){
                    curr = curr->next;
                    idx++;
                }
                if(!curr){
                    path.pop_back();
                    return true;
                }
            }
            path.pop_back();
            return false;
        }
        
        path.push_back(root->val);
        bool op1 = helper(head, root->left, path, len);
        bool op2 = helper(head, root->right, path, len);
        path.pop_back();
        return op1 or op2;
    }
public:
    bool isSubPath(ListNode* head, TreeNode* root) {
        vector<int> path;
        int len = lenLL(head);
        return helper(head, root, path, len);        
    }
};