class Solution {
public:
    int maximumUniqueSubarray(vector<int>& nums) {
        // longest subarray with unique characters
        unordered_map<int, int> mp;
        int sum = 0, maxSum = 0;
        int st = -1, en = -1;
        while(true){
            bool f1 = false, f2 = false;
            // acquire while its valid
            while(en < (int)(nums.size()-1)){
                en++;
                f1 = true;
                int num = nums[en];
                sum += num;
                mp[num]++;
                if(mp[num] == 2) break;
                if(sum > maxSum){
                    maxSum = sum;
                }
            }
            
            // release untill it becomes valid again
            while(st < en){
                st++;
                f2 = true;
                int num = nums[st];
                sum -= num;
                mp[num]--;
                if(mp[num] == 1) {
                    maxSum = max(maxSum, sum);
                    break;
                }
            }
            
            if(!f1 and !f2) break;
        }
        return maxSum;
    }
};