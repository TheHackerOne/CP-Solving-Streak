class Solution {
public:
    pair<int, int> dp[50][50];
    pair<int, int> solve(int s, int e, vector<int> &arr){
        if(s == e){
            return {arr[s], 0};
        }
        if(dp[s][e].second != -1) return dp[s][e]; 
        int minSum = INT_MAX, maxLeaf = INT_MIN;
        for(int i=s;i<e;i++){
            auto left = solve(s, i, arr); // maxLeafValue, smallest Sum Non Leaf
            auto right = solve(i+1, e, arr);
            maxLeaf = max(left.first, right.first);
            minSum = min(minSum, left.second + right.second + left.first*right.first);
        }
        
        return dp[s][e] = {maxLeaf, minSum};
    }
    
    int mctFromLeafValues(vector<int>& arr) {
        for(int i=0;i<50;i++){
            for(int j=0;j<50;j++){
                dp[i][j] = {-1, -1};
            }
        }
        pair<int, int> res = solve(0, arr.size()-1, arr);
        return res.second;
    }
};