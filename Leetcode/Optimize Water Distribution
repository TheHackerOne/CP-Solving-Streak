#include<bits/stdc++.h>
using namespace std;

int minCostToSupplyWater(int n, vector<int>&wells, vector<vector<int>>& pipes){
    unordered_map<int, vector<pair<int, int>>> graph;
    for(int i=0;i<pipes.size();i++){
        int u = pipes[i][0], v = pipes[i][1], w = pipes[i][2];
        u--, v--;
        graph[u].push_back({v, w});
        graph[v].push_back({u, w});
    }
    for(int i=0;i<wells.size();i++){
        int wellCost = wells[i];
        graph[i].push_back({wells.size(), wellCost});
        graph[wells.size()].push_back({i, wellCost});
    }

    priority_queue<pair<int, int>, vector<pair<int, int>>,greater<pair<int, int>>> pq;
    vector<int>visited(wells.size()+1, 0);
    pq.push({0, 0}); // distance, node
    int ans = 0;
    while(!pq.empty()){
        pair<int, int> p = pq.top();
        pq.pop();
        int node = p.second, cost = p.first;
        if(visited[node]) continue;
        visited[node] = 1;
        ans += cost;
        for(auto neigh:graph[node]){
            if(!visited[neigh.first]){
                pq.push({neigh.second, neigh.first});
            }
        }
    }
    return ans;
}


int main(){
    int v,e;
    cin>>v>>e;
    
    
    vector<int>wells(v);
    
    for(int i=0;i<v;i++){
        cin>>wells[i];
    }
    
    
    vector<vector<int>>pipes(e,vector<int>(3));
    
    for(int i=0;i<e;i++){
        for(int j=0;j<3;j++){
            cin>>pipes[i][j];
        }
    }
    
    cout<<minCostToSupplyWater(v, wells, pipes);
    
}