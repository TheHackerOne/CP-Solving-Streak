/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode *dfs(TreeNode *root, unordered_map<int, int> &mp, vector<TreeNode *> &ans){
        if(!root) return nullptr;
        
        root -> left = dfs(root->left, mp, ans);
        root -> right = dfs(root->right, mp, ans);
        if(mp.find(root->val) != mp.end()){
            if(root->left) ans.push_back(root->left);
            if(root->right) ans.push_back(root->right);
            root->left = root->right = nullptr;
            return nullptr;
        }
        return root;
    }
    
    vector<TreeNode*> delNodes(TreeNode* root, vector<int>& to_delete) {
        unordered_map<int, int> mp;
        for(int i=0;i<to_delete.size();i++){
            mp[to_delete[i]] = 1;
        }
        vector<TreeNode *> ans;
        TreeNode *res = dfs(root, mp, ans);
        if(mp.find(root->val) == mp.end())
            ans.push_back(root);
        return ans;
    }
};