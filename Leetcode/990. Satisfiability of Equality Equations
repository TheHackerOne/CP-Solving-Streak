class Solution {
public:
    int parent[26];
    
    int findParent(int num){
        if(parent[num] < 0) return num;
        return parent[num] = findParent(parent[num]);
    }
    
    void unionNodes(int a, int b){
        if(a < b){
            parent[a] += parent[b];
            parent[b] = a;
        }else{
            parent[b] += parent[a];
            parent[a] = b;
        }
    }
    
    bool equationsPossible(vector<string>& equations) {
        for(int i=0;i<26;i++) parent[i] = -1;
        
        sort(equations.begin(), equations.end(), [](string s1, string s2){
            s1 = s1.substr(1, 2), s2 = s2.substr(1, 2);
            return s1 > s2;
        });
        
        for(int i=0;i<equations.size();i++){
            int u = equations[i][0]-'a';
            int v = equations[i][3]-'a';
            u = findParent(u), v = findParent(v);
            if(equations[i].substr(1, 2) == "=="){
                if(u != v)
                    unionNodes(u, v);
            }else{
                if(u == v) return false;
            }
        }
        return true;
    }
};