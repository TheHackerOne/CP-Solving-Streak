class Solution {
private:
    vector<string> allStr(string s){
        stringstream str(s);
        string word = "";
        vector<string> ss;
        while(str >> word){
            ss.push_back(word);
            word = "";
        }
        return ss;
    }
public:
    bool wordPattern(string pattern, string s) {
      unordered_map<char, string> mp;
      vector<string> strs = allStr(s);
      if(strs.size() != pattern.length()) return false;
      unordered_map<string, int> present;
      for(int i=0;i<pattern.length();i++){
        char ch1 = pattern[i];
        string word = strs[i];
        if(mp.find(ch1) == mp.end()){
          if(present.find(word) == present.end()){
            mp[ch1] = word;
            present[word] = 1;
          }else return false;
        }else{
          if(word == mp[ch1]){}
          else return false;
        }    
      }
      return true;
    }
};