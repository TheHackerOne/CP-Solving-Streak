class Solution {
public:
    int minOperations(vector<int>& nums, int x) {
        long long n = nums.size();
        vector<long long> prefix(n, 0), suffix(n, 0);
        unordered_map<long long, long long> pre, suf;
        
        for(long long i=0;i<n;i++){
            prefix[i] = (i-1 >= 0 ? prefix[i-1] : 0) + nums[i];
            pre[prefix[i]] = i;
        }
        
        for(long long i=n-1;i>=0;i--){
            suffix[i] = (i+1 < n ? suffix[i+1] : 0) + nums[i];
            suf[suffix[i]] = n-i-1;
        }
        
        long long onlyLeft = pre.find(x) != pre.end() ? pre[x]+1 : INT_MAX;
        long long onlyRight = suf.find(x) != suf.end() ? suf[x]+1 : INT_MAX;
        
        long long combined = INT_MAX;
        
        for(long long i=0;i<n;i++){
            long long leftNum = prefix[i];
            long long remNum = x - leftNum;
            long long leftLen = i+1;
            
            if(suf.find(remNum) != suf.end()){
                long long rightLen = suf[remNum] + 1;
                if(leftLen + rightLen <= n)
                    combined = min(combined, leftLen + rightLen);
            }
        }
        long long res = min({ onlyLeft, onlyRight, combined });
        return res == INT_MAX ? -1 : res;
    }
};