class Solution {
private:
    bool dfs(int i, int j, vector<vector<char>> &b, string word){
        if(word.length() == 0) return true;
        int n = b.size(), m = b[0].size();
        
        char ch = b[i][j];
        b[i][j] = '.';
        bool res = false;
        string sub = word.substr(1);
        
        if(i-1 >= 0 and b[i-1][j] != '.' and b[i-1][j] == word[0]) if(dfs(i-1, j, b, sub)) return true;
        if(j+1 < m and b[i][j+1] != '.' and b[i][j+1] == word[0]) if(dfs(i, j+1, b, sub)) return true;
        if(i+1 < n and b[i+1][j] != '.' and b[i+1][j] == word[0]) if(dfs(i+1, j, b, sub)) return true;
        if(j-1 >= 0 and b[i][j-1] != '.' and b[i][j-1] == word[0]) if(dfs(i, j-1, b, sub)) return true;
        
        b[i][j] = ch;
        return res;
    }
public:
    bool exist(vector<vector<char>>& board, string word) {
        bool ans = false;
        int n = board.size(), m = board[0].size();
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(board[i][j] == word[0]){
                    if(dfs(i, j, board, word.substr(1))) return true;
                }
            }
        }
        return ans;
    }
};