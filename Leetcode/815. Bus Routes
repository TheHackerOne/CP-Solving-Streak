class Solution {
public:
    int numBusesToDestination(vector<vector<int>>& routes, int source, int target) {
        int n = routes.size();
        if(target==source) return 0;
        unordered_map<int, vector<int>> mp;
        for(int i=0;i<n;i++){
            int bus = i;
            for(auto busstop:routes[i]){
                mp[busstop].push_back(bus);
            }
        }
        
        queue<int> q;
        int level = 1;

        vector<bool> vbusStop(100005, 0);
        vector<bool> vbus(100005, 0);

        q.push(source); // store the source bus stop
        vbusStop[source] = 1;
        
        while(!q.empty()){
            int size = q.size();
            while(size--){
                int busStop = q.front();
                q.pop();
                
                vector<int> buses = mp[busStop];
                
                for(auto bus:buses){
                    if(!vbus[bus]){
                        vbus[bus]=1;
                        for(auto bstop:routes[bus]){
                            
                            if(!vbusStop[bstop]){
                                if(bstop == target) return level;
                                q.push(bstop);
                                vbusStop[bstop] = 1;
                            }
                        }
                    }
                }
            }
            level++;
        }
        return -1;
    }
};