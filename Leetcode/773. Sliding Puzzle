class Solution {
public:
    int slidingPuzzle(vector<vector<int>>& board) {
        unordered_map<string, int> visited;
        vector<vector<int>> validSwaps = {{1, 3}, {0, 2, 4}, {1, 5}, {0, 4}, {1, 3, 5}, {2, 4}};
        string src = "";
        for(int i=0;i<2;i++){
            for(int j=0;j<3;j++){
                src += to_string(board[i][j]);
            }
        }
        if(src == "123450") return 0;
        visited[src] = 1;
        queue<string> q;
        q.push(src);
        int level = 1;
        while(!q.empty()){
            int size =q.size();
            while(size--){
                string str = q.front();
                q.pop();
                int idx = 0;
                while(str[idx] != '0') idx++;
                vector<int> swaps = validSwaps[idx];
                for(int i=0;i<swaps.size();i++){
                    string strNew = str;
                    swap(strNew[idx], strNew[validSwaps[idx][i]]);
                    if(visited.find(strNew) == visited.end()){
                        q.push(strNew);
                        visited[strNew] = 1;
                    }
                    if(strNew == "123450") return level;
                }
            }
            level++;
        }
        return -1;
    }
};