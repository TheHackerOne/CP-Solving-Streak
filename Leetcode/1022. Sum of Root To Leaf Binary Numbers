/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    void helper(TreeNode *root, string asf, vector<string> &b){
        if(root == nullptr) return;
        if(root->left == nullptr and root->right == nullptr){
            b.push_back(asf+to_string(root->val));
            return;
        }
        helper(root->left, asf+to_string(root->val), b);
        helper(root->right, asf+to_string(root->val), b);
    }
public:
    int sumRootToLeaf(TreeNode* root) {
        vector<string> binarys;
        helper(root, "", binarys);
        int ans = 0;
        for(auto str:binarys){
            int cnt = 0, num = 0;
            for(int i=str.length()-1;i>=0;i--){
                int binary = str[i]-'0';
                num += (binary*pow(2, str.length()-i-1));
            }
            ans += num;
        }
        return ans;
    }
};