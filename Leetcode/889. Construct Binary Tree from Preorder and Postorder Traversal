/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode *helper(vector<int> &pre, int pres, int pree, vector<int> &post, int posts, int poste){
        if(pres > pree) return nullptr;
        
        TreeNode *node = new TreeNode(pre[pres]);
        
        if(pres == pree) return node;
        
        int idx = posts;
        while(post[idx] != pre[pres+1]){
            idx++;
        }
        int count = idx-posts+1;
        node->left = helper(pre, pres+1, pres+count, post, posts, idx);
        node->right = helper(pre, pres+count+1, pree, post, idx+1, poste-1);
        return node;
    }
    
    TreeNode* constructFromPrePost(vector<int>& preorder, vector<int>& postorder) {
        return helper(preorder, 0, preorder.size()-1, postorder, 0, postorder.size()-1);
    }
};