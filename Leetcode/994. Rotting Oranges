class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int n = grid.size(), m = grid[0].size();
   queue<pair<int, int>> q;
   for(int i=0;i<n;i++){
       for(int j=0;j<m;j++){
           if(grid[i][j] == 2) q.push({i, j});
       }
   }   
   int level = 1, minTime = 0;
   while(!q.empty()){
       int size = q.size();
       while(size--){
           pair<int, int> p = q.front();
           q.pop();
           int i = p.first, j = p.second;
            if(i-1>=0 && grid[i-1][j] == 1) grid[i-1][j] = -1, minTime = max(minTime, level), q.push({ i-1, j });
            if(j-1>=0 && grid[i][j-1] == 1) grid[i][j-1] = -1, minTime = max(minTime, level), q.push({ i, j-1 }); 
            if(i+1<n && grid[i+1][j] == 1)  grid[i+1][j]  = -1, minTime = max(minTime, level), q.push({ i+1, j });
            if(j+1<m && grid[i][j+1] == 1) grid[i][j+1] = -1, minTime = max(minTime, level), q.push({ i,j+1}); 
       }
       level++;
   }
   for(int i=0;i<n;i++){
       for(int j=0;j<m;j++){
           if(grid[i][j] == 1) return -1;
       }
   }  
   return minTime;
    }
};