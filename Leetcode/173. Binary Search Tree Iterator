/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class BSTIterator {
private:
    TreeNode *curr = nullptr;
    
    TreeNode *getRightMostNode(TreeNode *left, TreeNode *node){
        while(left->right != nullptr and left->right != node ){
            left = left->right;
        }
        return left;
    }
public:
    TreeNode *morris(){
        stack<TreeNode*> st;
        st.push(curr);
        TreeNode *node = st.top();
        while(!st.empty()){            
            if(node->left == nullptr){
                curr = node->right;
                return node;
            }else{
                TreeNode *rightMost = getRightMostNode(node->left, node);
                if(rightMost -> right == nullptr){
                    rightMost->right = node;
                    node = node->left;
                }else{
                    curr = node->right;
                    rightMost->right = nullptr;
                    return node;
                }
            }
        }
        return nullptr;
    }
    
    BSTIterator(TreeNode* root) {
        curr = root;
    }
    
    int next() {
        return morris()->val;
    }
    
    bool hasNext() {
        return curr != nullptr;
    }
};

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator* obj = new BSTIterator(root);
 * int param_1 = obj->next();
 * bool param_2 = obj->hasNext();
 */