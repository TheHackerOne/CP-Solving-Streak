/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
private:
    ListNode *midEle(ListNode *head){
        ListNode *slow = head, *fast= head;
        while(fast->next != nullptr and fast->next->next != nullptr){
            slow = slow->next;
            fast = fast->next->next;
        }
        return slow;
    }
    
    ListNode *reverse(ListNode *head){
        ListNode *curr = head, *prev = nullptr, *forw = nullptr;
        while(curr != nullptr){
            forw = curr->next;
            curr->next = prev;
            prev = curr;
            curr = forw;
        }
        return prev;
    }
public:
    bool isPalindrome(ListNode* head) {
        ListNode *mid = midEle(head);
        ListNode *h1 = head;
        ListNode *h2 = mid->next;
        mid->next = nullptr;
        h2 = reverse(h2);
        while(h1 != nullptr and h2 != nullptr){
            if(h1->val != h2->val) return false;
            h1 = h1->next;
            h2 = h2->next;
        }
        return true;
    }
};