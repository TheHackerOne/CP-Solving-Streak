class Solution {
public:
    int maxDistance(vector<vector<int>>& matrix) {
        queue<pair<int,int>> q;
    int n = matrix.size(), m = matrix[0].size();
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(matrix[i][j] == 1) q.push({i,j});
        }
    }
    if(q.size() == n*m || q.empty()) return -1;
    int level = 1;
    while(!q.empty()){
        int size=q.size();
        while(size--){
            pair<int, int> pq = q.front();
            q.pop();
            int r = pq.first, c = pq.second;
            if(r-1>=0 && matrix[r-1][c] == 0) matrix[r-1][c] = level, q.push({r-1, c});
            if(c-1>=0 && matrix[r][c-1] == 0) matrix[r][c-1] = level, q.push({r, c-1});
            if(r+1<n && matrix[r+1][c] == 0) matrix[r+1][c] = level, q.push({r+1, c});
            if(c+1<m && matrix[r][c+1] == 0) matrix[r][c+1] = level, q.push({r, c+1});
        }
        level++;
    }
    int maxAns = INT_MIN;
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            maxAns = max(maxAns,matrix[i][j]);
        }
    }
    return maxAns;
    }
};