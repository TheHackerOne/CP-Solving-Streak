class Solution {
public:
    bool canPartition(vector<int>& nums) {
        int sum = accumulate(nums.begin(), nums.end(), 0);
        if(sum%2) return false;
        sum /= 2;
        vector<vector<int>> dp(nums.size()+1, vector<int>(sum+1, 0));
        for(int i=0;i<=sum;i++){
            dp[0][i] = 0;
        }
        for(int i=0;i<=nums.size();i++){
            dp[i][0] = 1;
        }
        
        for(int pos=1;pos<=nums.size();pos++){
            for(int tar=1;tar<=sum;tar++){
                int op1 = nums[pos-1] <= tar ? dp[pos-1][tar-nums[pos-1]] : 0; // select element
                int op2 = dp[pos-1][tar];
                dp[pos][tar] = op1 or op2;
            }
        }
        
        return dp[nums.size()][sum];
    }
};