class Solution {
private:
    int MOD = 1e9+7;
    int pow(int x, int n){
        // base case
        if(n == 0) return 1;
        if(n == 1) return x;
        
        // main logic
        int res = pow(x, n/2);
        
        if(n%2) return ((1LL*res*res)%MOD*x)%MOD;
        return (1LL*res*res)%MOD;
    }
public:
    int sumSubseqWidths(vector<int>& nums) {
        int ans = 0;
        sort(nums.begin(), nums.end());
        int n = nums.size();
        for(int i=0;i<nums.size();i++){
            int maxTime = pow(2, i);
            int minTime = pow(2, n-i-1);
            ans = (ans + (1LL*nums[i]*(maxTime-minTime))%MOD)%MOD;
        }
        
        return ans;
    }
};