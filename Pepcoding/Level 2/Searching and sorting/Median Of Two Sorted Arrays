#include<bits/stdc++.h>
using namespace std;

float find(vector<float> &nums1,vector<float> &nums2) {
    if(nums2.size() < nums1.size()) return find(nums2, nums1);
        int n1 = nums1.size(), n2 = nums2.size();
        int l = 0, h = nums1.size(), half = (n1+n2+1)/2;
        double ans;
        while(l <= h){
            int partitionIdx = (l+h)/2;
            int eleInNum1 = partitionIdx, eleInNum2 = half - eleInNum1;
            
            int l1 = eleInNum1-1>=0?nums1[eleInNum1-1]:INT_MIN, 
            l2 = eleInNum2-1>=0?nums2[eleInNum2-1]:INT_MIN, 
            r1 = eleInNum1==nums1.size()?INT_MAX:nums1[eleInNum1], 
            r2 = eleInNum2==nums2.size()?INT_MAX:nums2[eleInNum2];
            if(l1>r2){
                h = partitionIdx-1;
            }else if(l2>r1){
                l = partitionIdx+1;
            }else{
                if((nums1.size()+nums2.size())%2 == 0)
                    return (max(l1,l2)+min(r1,r2))/(double)2;
                else return max(l1,l2);
            }
        }
        return ans;
}

int main(){
    int n1, n2;
    //input work
    cin>>n1;
    vector<int> a(n1);

    for(int i=0; i<n1; i++){
        cin>>a[i];
    }
    vector<float>a1(n1);
    for(int i=0;i<n1;i++){
        a1[i]=(float)(a[i]);
    }

    cin>>n2;
    vector<int> b(n2);

    for(int i=0; i<n2; i++){
        cin>>b[i];
    }
    vector<float>b2(n2);
    for(int i=0;i<n2;i++){
        b2[i]=(float)(b[i]);
    }
    float median = find(a1,b2);
    int ab=median*10;
    string ans=to_string(ab);
    int k=ans.length();
    if(ans[k-1]=='0') cout<<median<<".0";
    else cout<<median;
    
    return 0;
}