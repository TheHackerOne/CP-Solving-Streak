#include<bits/stdc++.h>
using namespace std;

void display(vector<vector<int>>& arr){
    
    for(int i=0;i<arr.size();i++){
        for(int j=0;j<arr[i].size();j++){
            cout<<arr[i][j]<<" ";
        }
        cout<<endl;
    }
    cout<<endl;
    
}

bool isSet(int num, int i){
    if(num&(1<<i)) return true;
    return false;
}

void solveSudoku(vector<vector<int>>& arr,vector<int>&rows,vector<int>& cols,vector<vector<int>>& grid,int i,int j){
   // base case
    if(i == 9){
        display(arr);
        return;
    }

   // main logic
   if(arr[i][j] != 0){
       if(j != 8) solveSudoku(arr, rows, cols, grid, i, j+1);
       else solveSudoku(arr, rows, cols, grid, i+1, 0);
   }else{
       for(int x=1;x<=9;x++){
           if(!isSet(rows[i], x) and !isSet(cols[j], x) and !isSet(grid[i/3][j/3], x)){
               rows[i] |= (1<<x);
               cols[j] |= (1<<x);
               grid[i/3][j/3] |= (1<<x);
               arr[i][j] = x;
               if(j != 8) solveSudoku(arr, rows, cols, grid, i, j+1);
               else solveSudoku(arr, rows, cols, grid, i+1, 0);
               arr[i][j] = 0;
               rows[i] &= ~(1<<x);
               cols[j] &= ~(1<<x);
               grid[i/3][j/3] &= ~(1<<x);
           }
       }
   }
}



int main(){
    
    vector<vector<int>>arr(9,vector<int>(9,0));
    vector<int>rows(9,0);
    vector<int>cols(9,0);
    vector<vector<int>>grid(3,vector<int>(3,0));
    
    for(int i=0;i<9;i++){
        for(int j=0;j<9;j++){
            int digit;
            cin>>digit;
            
            arr[i][j]=digit;
            rows[i]|=(1<<digit);
            cols[j]|=(1<<digit);
            grid[i/3][j/3]|=(1<<digit);
        }
    }
    
    solveSudoku(arr,rows,cols,grid,0,0);
}