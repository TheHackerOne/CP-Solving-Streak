Q1:

Given a binary tree and target node. 
By giving the fire to the target node and fire starts to spread in a complete tree. 
The task is to print the sequence of the burning nodes of a binary tree.
Rules for burning the nodes : 

Fire will spread constantly to the connected nodes only.
Every node takes the same time to burn.
A node burns only once.

Input : 
                       12
                     /     \
                   13       10
                          /     \
                       14       15
                      /   \     /  \
                     21   24   22   23
target node = 14

Output :
14
21, 24, 10
15, 12
22, 23, 13


class TreeNode{
    public:
        int data;
        TreeNode *left;
        TreeNode *right;
        
        TreeNode(int data){
            this->data = data;
            left = right = nullptr;
        }
};

void burnSubtree(TreeNode *root, int startTime, TreeNode *blockNode, vector<vector<int>> &burnTreeInfo){
    // base case
    if(root == nullptr or root == blockNode) return;
    
    // main logic
    if(burnTreeInfo.size() == startTime) burnTreeInfo.push_back({});
    burnTreeInfo[startTime].push_back(root->data);
    
    burnSubtree(root->left, startTime+1, blockNode, burnTreeInfo);
    burnSubtree(root->right, startTime+1, blockNode, burnTreeInfo);
}
                        12
                     /     \
                   13       10 (1)
                          /     \
                       14(0)       15
                      /   \     /  \
                     21   24   22   23
bool findNodeInTree(TreeNode* root, int target, int &startTime, vector<vector<int>> &burnTreeInfo){
    // base case
    if(root == nullptr) return false;
    
    // main logic
    if(root->data == target){---
        burnSubtree(root, startTime, nullptr, burnTreeInfo);
        startTime += 1;
        return true; 
    }
    
    bool findInLeftSubtree = findNodeInTree(root->left, target, startTime, burnTreeInfo); 
    bool findInRightSubtree = findNodeInTree(root->right, target, startTime, burnTreeInfo);
    // left = false, right = false    
    
    
    if(findInLeftSubtree || findInRightSubtree){
        TreeNode *blockNode = findInLeftSubtree ? root->left : root->right; 
        burnSubtree(root, startTime, blockNode, burnTreeInfo);
        startTime += 1;
        return true;
    }
    return false;
}

vector<vector<int>> burnTree(TreeNode *root, int target){
    vector<vector<int>> burnTreeInfo;
    int startTime = 0;
    
    findNodeInTree(root, target, startTime, burnTreeInfo);
    
    return burnTreeInfo;
}


Q2:
Alice is rearranging her library. 
She takes the innermost shelf and reverses the order of books. 
She breaks the walls of the shelf. 
In the end, there will be only books and no shelf walls. Print the order of books.

Opening and closing walls of shelves are shown by '/' and '\' 
respectively whereas books are represented by lower case alphabets.

Input format

The first line contains string displaying her library.

Output format

Print only one string displaying Alice's library after rearrangement.


The first character of the string is '/' (slash) and the last character of the string is '\' (backslash) 
indicating outermost walls of the shelf.

Sample Input
/u/love\i\

Sample Output
iloveu

Explanation
/u/love\i\

Here Katrina breaks the inner most shelf and reverse the order. 
So the library will be /uevoli\ .

Now she breaks the outermost wall and reverses the order. 
So the library will be iloveu.

// Time Complexity : O(n)
// Space Complexity : O(n)








