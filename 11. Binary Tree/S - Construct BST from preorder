Construct BST from preorder

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    
    TreeNode *bstFromPre(vector<int> &preorder, int lr, int rr, int &idx){
       
        if((preorder[idx] < lr) || (preorder[idx] > rr) || (preorder.size() <= idx)) return NULL;
        
        
            TreeNode *root = new TreeNode(preorder[idx++]);
        
         root -> left =  bstFromPre(preorder, lr, preorder[idx-1], idx);
        root -> right = bstFromPre(preorder, preorder[idx-1], rr, idx);
        
        return root;
    }
    
    TreeNode* bstFromPreorder(vector<int>& preorder) {
        int lr = INT_MIN;
        int rr = INT_MAX;
        int idx = 0;
        TreeNode *ans = bstFromPre(preorder, lr, rr, idx);
        return ans;
    }
};