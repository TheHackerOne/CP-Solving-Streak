#include <iostream>
#include <bits/stdc++.h>
using namespace std;

class BinaryTreeNode{
    public:
    int data;
    BinaryTreeNode *left;
    BinaryTreeNode *right;

    BinaryTreeNode(int data){
        this -> data = data;
        left = NULL;
        right = NULL;
    }

    ~BinaryTreeNode(){
        delete left;
        delete right;
    }
};

BinaryTreeNode *TakeInput(){
    int data;
    cin>>data;
    BinaryTreeNode *root = new BinaryTreeNode(data);
    queue<BinaryTreeNode *> pendingNodes;
    pendingNodes.push(root);
    while(!pendingNodes.empty()){
        BinaryTreeNode *currentRoot = pendingNodes.front();
        pendingNodes.pop();
        int left, right;
        cout<<"Enter left child of "<<currentRoot -> data<<endl;
        cin>>left;
        if(left != -1){
            BinaryTreeNode *newNode = new BinaryTreeNode(left);
            pendingNodes.push(newNode);
            currentRoot -> left = newNode;
        }
        cout<<"Enter right child of "<<currentRoot -> data<<endl;
        cin>>right;
        if(right != -1){
            BinaryTreeNode *newNode = new BinaryTreeNode(right);
            pendingNodes.push(newNode);
            currentRoot -> right = newNode;
        }
    }
    return root;
}

BinaryTreeNode *MakeTreeFromInorderPreorderHelper(int *in, int *pre, int inS, int inE, int preS, int preE){
    if(inS > inE)
        return NULL;
    int rootData = pre[preS], j = -1;
    for(int i = inS; i <= inE ; i++){
        if(in[i] == rootData){
            j = i;
            break;
        }
    }
    int lInS = inS;
    int lInE = j-1;
    int lPreS = preS + 1;
    int lPreE = lPreS + lInE - lInS;
    int rPreS = lPreE + 1;
    int rPreE = preE;
    int rInS = j + 1;
    int rInE = inE;
    BinaryTreeNode *root = new BinaryTreeNode(rootData);
    root -> left = MakeTreeFromInorderPreorderHelper(in, pre, lInS, lInE, lPreS, lPreE);    
    root -> right = MakeTreeFromInorderPreorderHelper(in, pre, rInS, rInE, rPreS, rPreE);
    return root;
}

BinaryTreeNode *MakeTreeFromInorderPreorder(int *in,int *pre, int size){
    return MakeTreeFromInorderPreorderHelper(in, pre, 0, size-1, 0, size-1);
}

void printAll(BinaryTreeNode *root){
    if(root == NULL){
        return;
    }
    cout<<root -> data<<" : ";
    if(root -> left != NULL){
        cout<<"L "<<root -> left -> data<<" ";
    }
    if(root -> right != NULL){
        cout<<"R "<<root -> right -> data<<" ";
    }
    cout<<endl;
    printAll(root -> left);
    printAll(root -> right);
}

void printInorder(BinaryTreeNode *root){
    if(root == NULL)
        return;
    printInorder(root -> left);
    cout<<root -> data<<" ";
    printInorder(root -> right);
}

void printPreorder(BinaryTreeNode *root){
    if(root == NULL)
        return;
    cout<<root -> data<<" ";
    printPreorder(root -> left);
    printPreorder(root -> right);
}

void printPostorder(BinaryTreeNode *root){
    if(root == NULL)
        return;
    printPostorder(root -> left);
    printPostorder(root -> right);
    cout<<root -> data<<" ";
}

void printUsingQueue(BinaryTreeNode *root){
    queue<BinaryTreeNode *> pendingNodes;
    pendingNodes.push(root);
    while(!pendingNodes.empty()){
        BinaryTreeNode *front = pendingNodes.front();
        pendingNodes.pop();
        cout<<front -> data<<" : ";
        if(front -> left != NULL){
            cout<<"L "<<front -> left -> data<<" ";
            pendingNodes.push(front -> left);
        }
        if(front -> right != NULL){
            cout<<"R "<<front -> right -> data;
            pendingNodes.push(front -> right);
        }
        cout<<endl;
    }
}

pair<int, int> HeightDiameter(BinaryTreeNode *root){
    if(root == NULL){
        pair<int, int> p ;
        p.first = 0;
        p.second = 0;
        return p;
    }
    pair<int, int> leftAns = HeightDiameter(root -> left);
    pair<int, int> rightAns = HeightDiameter(root -> right);
    int leftHeight = leftAns.first;
    int rightHeight = rightAns.first;
    int leftDiameter = leftAns.second;
    int rightDiameter = rightAns.second;
    
    pair<int, int> r;
    r.first = 1 + max(leftHeight, rightHeight);
    r.second = max(leftHeight + rightHeight, max(leftDiameter, rightDiameter));
    return r;
}

int main() {
    BinaryTreeNode *root = TakeInput();
    printAll(root);
    cout<<endl<<endl;
    printUsingQueue(root);
    cout<<endl;
    
    cout<<"INORDER : ";
    printInorder(root);
    cout<<endl;
    
    cout<<"PREORDER : ";
    printPreorder(root);
    cout<<endl;
    
    cout<<"POSTORDER : ";
    printPostorder(root);
    cout<<endl;
    
    // Make a tree from an inorder and preorder
    //INORDER : 4 2 6 5 7 1 3 8 9 
    //PREORDER : 1 2 4 5 6 7 3 8 9 
    int in[] = {4, 2, 6, 5, 7, 1, 3, 8, 9};
    int pre[] = {1, 2, 4, 5, 6, 7, 3, 8, 9};
    int size = sizeof(in)/sizeof(in[0]);
    BinaryTreeNode *root1 = MakeTreeFromInorderPreorder(in, pre, size);
    printUsingQueue(root1);
    
    delete root1;
    
    pair<int, int> p = HeightDiameter(root);
    cout<<"Height : "<<p.first<<endl;
    cout<<"Diameter : "<<p.second<<endl;
    
    delete root;

    return 0;
}
// INPUT
// 1 2 3 4 5 -1 8 -1 -1 6 7 -1 9 -1 -1 -1 -1 -1 -1 