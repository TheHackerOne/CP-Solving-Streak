#include <iostream>
using namespace std;

template <typename T>
class Node{
    public:
    T data;
    Node<T> *next;

    Node(int data){
        this -> data = data;
        this -> next = NULL;
    }
};

template <typename T>
class StackUsingLinkedList{
    Node<T> *head;
    int size;

    public:
    StackUsingLinkedList(){
        head = NULL;
        size = 0;
    }

    int getSize(){
        return size;
    }

    bool isEmpty(){
        return size == 0;
    }

    void push(T element){
        Node<T> *newNode = new Node<T>(element);
        newNode -> next = head;
        head = newNode;
        size++;
    }

    T pop(){
        if(head == NULL){
            cout<<"Stack is Empty"<<endl;
            return 0;
        }
        Node<T> *temp = head;
        T ans = head -> data;
        head = head -> next;
        delete temp;
        size--;
        return ans;
    }

    T top(){
        if(isEmpty()){
            return 0;
        }
        return head -> data;
    }
};

int main() {
    StackUsingLinkedList<int> s;
    s.push(10); 
    s.push(20); 
    s.push(30); 
    s.push(40);

    cout<<s.top()<<endl; 
    cout<<s.pop()<<endl; 
    cout<<s.top()<<endl; 
    s.pop();
    s.pop();
    s.pop();
    s.pop();

    if(s.isEmpty())
        cout<<"Stack is empty"<<endl;
    else
        cout<<"Stack is not empty"<<endl;    

    return 0;
}
