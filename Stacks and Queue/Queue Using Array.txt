#include <iostream>
#include<bits/stdc++.h>
using namespace std;

template <typename T>
class QueueUsingArray{
    T *data;
    int size;
    int firstIndex;
    int nextIndex;
    int capacity;

    public:
    QueueUsingArray(int s){
        data = new T[s];
        capacity = s;
        size = 0;
        firstIndex = -1;
        nextIndex = 0;
    }

    int cap(){
        return capacity;
    }

    int getSize(){
        return size;
    }

    bool isEmpty(){
        return size == 0;
    }

    void enqueue(T data){
        if(size == capacity){
            T *newData = new T[2*capacity];
            int j = 0;
            for(int i=firstIndex;i<capacity;i++){
                newData[j] = this -> data[i];
                j++;
            }
            for(int i=0;i<firstIndex;i++){
                newData[j] = this -> data[i];
                j++;
            }
            delete [] this -> data;
            this -> data = newData;
            firstIndex = 0;
            nextIndex = capacity;
            capacity *= 2;
        }
        this -> data[nextIndex] = data;
        nextIndex = (nextIndex + 1)%capacity;
        if(firstIndex == -1){
            firstIndex = 0;
        }
        size++;
    }

    T front(){
        if(isEmpty()){
            cout<<"Queue empty"<<endl;
            return 0;
        }
        return data[firstIndex];
    }

    T dequeue(){
         if(isEmpty()){
            cout<<"Queue empty"<<endl;
            return 0;
        }
        T ans = data[firstIndex];
        firstIndex = (firstIndex + 1)%capacity;
        size--;
        if(size == 0){
            firstIndex = -1;
            nextIndex = 0;
        }
        return ans;
    }
};

int main() {
    QueueUsingArray<int> q(4);
    q.enqueue(10);
    q.enqueue(20);
    q.enqueue(30);
    q.enqueue(40);
    q.enqueue(50);

    cout<<q.dequeue()<<endl;
    cout<<q.front()<<endl;
    cout<<q.dequeue()<<endl;
    cout<<q.getSize()<<endl;
    cout<<q.isEmpty()<<endl;
    cout<<q.cap()<<endl;

    return 0;
}
