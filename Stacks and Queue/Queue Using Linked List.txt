#include <iostream>
#include <bits/stdc++.h>

using namespace std;

template <typename T>
class Node{
    public:
    T data;
    Node<T> *next;

    Node(int data){
        this->data = data;
        this->next = NULL;
    }
};

template <typename T>
class QueueUsingLinkedList{
    Node<T> *head;
    Node<T> *tail;
    int size;
    public:

    QueueUsingLinkedList(){
        head = NULL;
        tail = NULL;
        size = 0;
    }

    void enqueue(int data){
        Node<T> *newNode = new Node<T>(data);
        if(head == NULL){
            head = newNode;
            tail = newNode;
        }else{
            tail -> next = newNode;
            tail = newNode;
        }        
        size++;
    }

    T front(){
        if(head == NULL){
            return 0;
        }
        return head -> data;
    }

    T dequeue(){
        if(head == NULL){
            return 0;
        }
        Node<T> *temp = head;
        T data = temp -> data;
        head = head -> next;
        size--;
        delete temp;
        return data;
    }

    int getSize(){
        return size;
    }

    bool isEmpty(){
        return size == 0;
    }
};

int main() {
    QueueUsingLinkedList<int> q;
    q.enqueue(10);
    q.enqueue(20);
    q.enqueue(30);
    q.enqueue(40);
    q.enqueue(50);
    cout<<q.front()<<endl;
    cout<<q.dequeue()<<endl;
    cout<<q.front()<<endl;
    cout<<q.isEmpty()<<endl;
    cout<<q.getSize()<<endl;

    return 0;
}
