#include <iostream>
#include <bits/stdc++.h>
using namespace std;

/*
 when we create a variable say int i = 10;s
 first a memory is allocated to i in main memory
 after assigning the memory, i along with its info like address of i, type of i 
 will be stores in the symbol table (made during compile time)

 Pointer Airthematic only makes sense in case of arrays
 ex : p = p + 1 ;

 int a[10];
 a[i] = *(a + i);
 a points to the first element of array(stores the address)

 int *p = a;
 - p is a pointer that is pointing to a[0] and p has its own memory space somewhere
 - a is also pointing to a[0] but a does not have any other memory
 - cout << a << " " << &a << endl; gives the same result
 - cout << p << " " << &p << endl; gives different result

 printing int and char array act little differently
 int a[2] = {4, 1}
 cout << a << endl ; prints the address of a
 char b[] = "abcd";
 cout << b << endl ; instead of printing the address, it prints the whole string
 until it finds the null character
 char *c = b;
 cout << c << endl; prints whole string instead of address

 when we pass an array to a function, it gets passed as a pointer and not whole array
 we can also pass a part of an array to a function like sum(a + 3);
 this will pass array to the funciton from index 3 onwards

 it is possible to store int addres in character pointer or vice versa 
 but it can only be done using explicit typecasting
*/

void passByPointer(int *n, int *m){
    int t = *n;
    *n = *m;
    *m = t;
}

void passByValue(int n, int m){
    int t = n;
    n = m;
    m = t;
}

void passByReference(int &a, int &b){
    int t = a;
    a = b;
    b = t;
}

int main() {
    // int a = 50;
    // int * n = &a;
    // int ** m = &n;

    // cout<<a<<endl; // 50
    // cout<<&a<<endl; // address of a 
    // cout<<n<<endl; // address of a
    // cout<<&n<<endl; // address of pointer 1
    // cout<<*n<<endl; //  50
    // cout<<m<<endl; // address of pointer 1
    // cout<<*m<<endl; // address of a

    // Dynamic Memory Allocation

    int y;
    cin>>y;
    int *d = new int[y];
    int g[12];

    for(int i=0;i<y;i++){
        d[i] = i;
    }

    for(int i=0;i<y;i++){
        cout<<d[i]<<" ";   
    }
    cout<<endl<<"Size of array = "<<sizeof(g)/sizeof(g[0]);
    cout<<endl<<"Size of array = "<<sizeof(d)/sizeof(d[0]);

    int n = 9, m = 6;

    // Pass By pointer
    cout<<endl<<n<<" "<<m<<endl;
    passByPointer(&n, &m);
    cout<<n<<" "<<m<<endl;

    // Pass by Value
    cout<<n<<" "<<m<<endl;
    passByValue(n, m);
    cout<<n<<" "<<m<<endl;

    // Pass by Reference
    cout<<n<<" "<<m<<endl;
    passByReference(n, m);
    cout<<n<<" "<<m<<endl;
    return 0;
}
