#include <iostream>
#include <bits/stdc++.h>

using namespace std;

class BinaryTreeNode{
    public:
    int data;
    BinaryTreeNode *left;
    BinaryTreeNode *right;

    BinaryTreeNode(int data){
        this -> data = data;
        left = NULL;
        right = NULL;
    }

    ~BinaryTreeNode(){
        delete left;
        delete right;
    }
};

class BST{
    BinaryTreeNode *root;

    public:
    BST(){
        root = NULL;
    }

    private:

    BinaryTreeNode *deleteData(int data, BinaryTreeNode *root){
        if(root == NULL)
            return NULL;
        
        if(data < root -> data){
            BinaryTreeNode *left = deleteData(data, root -> left);
            root -> left = left;
        } else if (data > root -> data) {
            BinaryTreeNode *right = deleteData(data, root -> right);
            root -> right = right;            
        } else {
            if(root -> left == NULL && root -> right == NULL){
                delete root;
                return NULL;
            } else if(root -> left == NULL && root -> right != NULL){
                BinaryTreeNode *temp = root -> right;
                root -> right = NULL;
                delete root;
                return temp ;
            } else if (root -> left != NULL && root -> right == NULL){
                BinaryTreeNode *temp = root -> left;
                root -> left = NULL;
                delete root;
                return temp ;
            } else{
                BinaryTreeNode *minNode = root -> right;

                while(minNode -> left != NULL){
                    minNode = minNode -> left;
                }
                root -> data = minNode -> data;
                root -> right = deleteData(minNode -> data , root -> right);
                return root;
            }
        }
        return root;
    }

    public:

    void deleteData(int data){
        root = deleteData(data, root);
    }

    private:

    BinaryTreeNode *insertData(int data, BinaryTreeNode *root){
        if(root == NULL){
            BinaryTreeNode *newNode = new BinaryTreeNode(data);
            return newNode;  
        }
        if(data < root -> data){
            BinaryTreeNode *left = insertData(data, root -> left);
            root -> left = left;
        } else {
            BinaryTreeNode *right = insertData(data, root -> right);
            root -> right = right;
        }
        return root;     
    }

    public:

    void insertData(int data){
        root = insertData(data, root);
    }

    private:

    bool hasData(BinaryTreeNode *root, int data){
        if(root == NULL)
            return false;
        if(root -> data == data)
            return true;
        else if(data < root -> data)       
            return hasData(root -> left, data);
        else      
            return hasData(root -> right, data);
    }

    private:

    void printTree(BinaryTreeNode *root){
        if(root == NULL)
            return;
        cout<<root -> data<<" : ";
        if(root -> left != NULL){
            cout<<"L "<<root -> left -> data<<" ";
        }
        if(root -> right != NULL){
            cout<<"R "<<root -> right -> data<<" ";
        }
        cout<<endl;
        printTree(root -> left);    
        printTree(root -> right);    
    }

    public:

    void printTree(){
        printTree(root);
    }

    bool hasData(int data){
        return hasData(root, data);
    }

};

int main() {
    BST b;
    b.insertData(10);
    b.insertData(5);
    b.insertData(20);
    b.insertData(7);
    b.insertData(3);
    b.insertData(15);

    b.printTree();
    cout<<endl;

    b.deleteData(10);
    b.deleteData(100);

    b.printTree();

    return 0;
}
