#include <iostream>
#include <bits/stdc++.h>
using namespace std;

class BinaryTreeNode{
    public:
    int data;
    BinaryTreeNode *left;
    BinaryTreeNode *right;

    BinaryTreeNode(int data){
        this -> data = data;
        left = NULL;
        right = NULL;
    }

    ~BinaryTreeNode(){
        delete left;
        delete right;
    }
};

void printAll(BinaryTreeNode *root){
    if(root == NULL){
        return ;
    }
    cout<<root -> data<<" : ";
    if(root -> left != NULL)
        cout<<"L "<<root -> left -> data;
    if(root -> right != NULL)
        cout<<" R "<<root -> right -> data;
    cout<<endl;    
    printAll(root -> left);
    printAll(root -> right);
}

void printUsingQueue(BinaryTreeNode *root){
    queue<BinaryTreeNode *> pendingNodes;
    pendingNodes.push(root);
    while(!pendingNodes.empty()){
        BinaryTreeNode *front = pendingNodes.front();
        pendingNodes.pop();
        cout<<front -> data<<" : ";
        if(front -> left != NULL){
            cout<<"L "<<front -> left -> data<<" ";
            pendingNodes.push(front -> left);
        }
        if(front -> right != NULL){
            cout<<"R "<<front -> right -> data<<" ";
            pendingNodes.push(front -> right);
        }
        cout<<endl;
    }
}

BinaryTreeNode *TakeInput(){
    int data;
    cin>>data;
    BinaryTreeNode *root = new BinaryTreeNode(data);
    queue<BinaryTreeNode *> pendingNodes;
    pendingNodes.push(root);
    while(!pendingNodes.empty()){
        BinaryTreeNode *front = pendingNodes.front();
        pendingNodes.pop();
        int left, right;
        cout<<"Enter the child of "<<front -> data<<endl;
        cin>>left;
        if(left != -1){
            BinaryTreeNode *newNode = new BinaryTreeNode(left);
            pendingNodes.push(newNode);
            front -> left = newNode;
        }
        cout<<"Enter the child of "<<front -> data<<endl;
        cin>>right;
        if(right != -1){
            BinaryTreeNode *newNode = new BinaryTreeNode(right);
            pendingNodes.push(newNode);
            front -> right = newNode;
        }
    }
    return root;
}

void printBetweenK1K2(BinaryTreeNode *root, int min, int max){
    if(root == NULL){
        return;
    }
    if(root -> data >= min && root -> data <= max)
        cout<<root -> data<<" ";
    printBetweenK1K2(root -> left, min, max);    
    printBetweenK1K2(root -> right, min, max);    
}

int maximum(BinaryTreeNode *root){
    if(root == NULL)
        return INT_MIN;
    int max1 = maximum(root -> left);    
    int max2 = maximum(root -> right);    
    return max(root -> data, max(max1, max2));
}

int minimum(BinaryTreeNode *root){
    if(root == NULL)
        return INT_MAX;
    int min1 = minimum(root -> left);    
    int min2 = minimum(root -> right);    
    return max(root -> data, min(min1, min2));
}


bool isBST(BinaryTreeNode *root){
    if(root == NULL){
        return true;
    }
    bool result = isBST(root -> left) && isBST(root -> right) && maximum(root -> left) < root -> data && minimum(root -> right) >= root -> data;
    return result;
}

BinaryTreeNode *SortedArrayToBST(int *arr, int start, int end){
    if(start > end)
        return NULL;
    int mid = (start + end)/2;
    BinaryTreeNode *root = new BinaryTreeNode(arr[mid]);
    BinaryTreeNode *leftNode = SortedArrayToBST(arr, start, mid - 1);
    BinaryTreeNode *rightNode = SortedArrayToBST(arr, mid + 1, end);
    root -> left = leftNode;
    root -> right = rightNode;
    return root;
}

bool findNodeInBST(BinaryTreeNode *root, int element){
    if(root == NULL)
        return false;
     if(root -> data == element)
        return true;
     bool ans;   
     if(element > root -> data)   
        ans = findNodeInBST(root -> right, element);
     if(element < root -> data)   
        ans = findNodeInBST(root -> left, element);
     if(ans)
        return true;
     else
        return false;  
}

int main() {
    BinaryTreeNode *root = TakeInput();
    // printAll(root);
    cout<<endl;
    printUsingQueue(root);

    int k1 = 8, k2 = 14;
    printBetweenK1K2(root, k1, k2);
    cout<<endl;

    if(isBST(root))
        cout<<"It is a BST"<<endl;
    else    
        cout<<"It is not a BST"<<endl;

    int arr[] = {1, 4, 8, 9, 13, 15, 19, 22};
    // BinaryTreeNode *root1 = TakeInput();
    // printAll(root1);

    int size = sizeof(arr)/sizeof(arr[0]);
    BinaryTreeNode *root2 = SortedArrayToBST(arr, 0, size-1);
    printAll(root2);

    cout<<endl;
    cout<<findNodeInBST(root2, 13)<<endl;
    cout<<findNodeInBST(root2, 23)<<endl;    

    return 0;
}
