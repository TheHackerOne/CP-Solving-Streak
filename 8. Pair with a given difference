
// Three Methods to solve
// 1. brute force approach T -> O(n^2), S -> O(1)
// 2. using hashmaps T -> O(n), S -> O(n)
// 3. using sorting and binary-search T -> O(nlogn), S -> O(1)


#include <iostream>
#include <bits/stdc++.h>
using namespace std;

int n, difference;

// Find pair with a give difference method -1
int* bruteForce(int x[]){
    static int a[2];
    fill(a, a+n, 0);
    for(int i=0;i<n;i++){
        for(int j=i+1;j<n;j++){
            if(abs(x[i] - x[j]) == difference){
                a[0] = i;
                a[1] = j;
                return a;
            }
        }
    }
    return a;
}

// Find pair with a give difference method -1


int main(){
    cin>>n>>difference;
    int a[n];
    for(int i=0;i<n;i++){
        cin>>a[i];
    }
    
    int *g = bruteForce(a);
    cout<<a[g[0]]<<" "<<a[g[1]];
    
    return 0;
}
