class Solution {
public:
    int mod = 1e9+7;
    long long expo(long long a, long long b, long long mod) {long long res = 1; while (b > 0) {if (b & 1)res = (res * a) % mod; a = (a * a) % mod; b = b >> 1;} return res;}
    long long mminvprime(long long a, long long b) {return expo(a, b - 2, b);}
    long long mod_add(long long a, long long b, long long m) {a = a % m; b = b % m; return (((a + b) % m) + m) % m;}
    long long mod_mul(long long a, long long b, long long m) {a = a % m; b = b % m; return (((a * b) % m) + m) % m;}
    long long mod_sub(long long a, long long b, long long m) {a = a % m; b = b % m; return (((a - b) % m) + m) % m;}
    long long mod_div(long long a, long long b, long long m) {a = a % m; b = b % m; return (mod_mul(a, mminvprime(b, m), m) + m) % m;}  //only for prime m
    int m = 1e9+7;
    int maximumProduct(vector<int>& nums, int k) {
        long long ans = 1;
        
        if(nums.size() == 1) return k+nums[0];
        
        sort(nums.begin(), nums.end());
        
        int i = 0;
        while(i < nums.size() and nums[i] == 0){
            if(k == 0) return 0;
            nums[i] = 1;
            i++;
            k--;
        }
        
        priority_queue<int, vector<int>, greater<int>> pq;
        int n = nums.size();
        for(int i=0;i<n;i++){
            pq.push(nums[i]);
        }
        
        while(k > 0){
            int top = pq.top()+1;
            pq.pop();
            pq.push(top);
            k--;
        }
        
        while(!pq.empty()){
            ans = mod_mul(pq.top(), ans, m);
            pq.pop();
        }
        
        return ans%m;
    }
};