

class Solution {
public:
    int maxTrailingZeros(vector<vector<int>>& grid) {        
        int n = grid.size(), m = grid[0].size();
        vector<vector<pair<int, int>>> preLeft(n, vector<pair<int, int>>(m, {0, 0})), sufRight(n, vector<pair<int, int>>(m, {0, 0})), preTop(n, vector<pair<int, int>>(m, {0, 0})), sufBottom(n, vector<pair<int, int>>(m, {0, 0}));
        
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                int num = grid[i][j];
                int two = 0, five = 0;
                while(num%2 == 0){
                    two++;
                    num /= 2;
                }
                while(num%5 == 0){
                    five++;
                    num /= 5;
                }
                preLeft[i][j] = {two, five};
                sufRight[i][j] = {two, five};
                preTop[i][j] = {two, five};
                sufBottom[i][j] = {two, five};
            }
        }
        
        for(int i=0;i<n;i++){
            for(int j=1;j<m;j++){
                preLeft[i][j].first += preLeft[i][j-1].first;
                preLeft[i][j].second += preLeft[i][j-1].second;
            }
        }
        for(int i=0;i<n;i++){
            for(int j=m-2;j>=0;j--){
                sufRight[i][j].first += sufRight[i][j+1].first;
                sufRight[i][j].second += sufRight[i][j+1].second;
            }
        }
        for(int i=1;i<n;i++){
            for(int j=0;j<m;j++){
                preTop[i][j].first += preTop[i-1][j].first;
                preTop[i][j].second += preTop[i-1][j].second;
            }
        }
        for(int i=n-2;i>=0;i--){
            for(int j=0;j<m;j++){
                sufBottom[i][j].first += sufBottom[i+1][j].first;
                sufBottom[i][j].second += sufBottom[i+1][j].second;
            }
        }

        int maxZeros = 0;
        
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                int lfirst2 = preTop[i][j].first + (j-1 >= 0 ? preLeft[i][j-1].first : 0);
                int lsecond2 = preLeft[i][j].first + (i+1 < n ? sufBottom[i+1][j].first : 0);
                int lthird2 = sufBottom[i][j].first + (j+1 < m ? sufRight[i][j+1].first : 0);
                int lfourth2 = sufRight[i][j].first + (i-1 >= 0 ? preTop[i-1][j].first : 0);
                int lfirst5 = preTop[i][j].second + (j-1 >= 0 ? preLeft[i][j-1].second : 0);
                int lsecond5 = preLeft[i][j].second + (i+1 < n ? sufBottom[i+1][j].second : 0);
                int lthird5 = sufBottom[i][j].second + (j+1 < m ? sufRight[i][j+1].second : 0);
                int lfourth5 = sufRight[i][j].second + (i-1 >= 0 ? preTop[i-1][j].second : 0);

                maxZeros = max({ maxZeros, min(lfirst2, lfirst5), min(lsecond2, lsecond5), min(lthird2, lthird5), min(lfourth2, lfourth5) });
            }
        }

        return maxZeros;
    }
};