#include <iostream>
#include<bits/stdc++.h>
using namespace std;

int elementToFind;

int binarySearch(int arr[], int start, int end){
    int position = INT_MIN;
    while(start <= end){
        int mid = (start + end)/2;
        if(arr[mid] == elementToFind){
            position = mid;
                break;
        }
        if(elementToFind > arr[mid]){
            start = mid + 1;
        }else{
            end = mid - 1;
        }
    }
    return position;
}

int upperBoundBinarySearch(int arr[], int start, int end){
    int position = INT_MIN;
    while(start <= end){
        int mid = (start + end)/2;
        if(arr[mid] == elementToFind){
            position = mid;
            if(arr[position+1] == elementToFind){
                start = mid + 1;
            }else{
                break;
            }
        }
        if(elementToFind > arr[mid]){
            start = mid + 1;
        }else if(elementToFind < arr[mid]){
            end = mid - 1;
        }
    }
    return position;
}

int lowerBoundBinarySeach(int arr[], int start, int end){
    int position = INT_MIN;
    while(start <= end){
        int mid = (start + end)/2;
        if(arr[mid] == elementToFind){
            position = mid;
            if(arr[position-1] == elementToFind){
                end = mid - 1;
            }else{
                break;
            }
        }
        if(elementToFind > arr[mid]){
            start = mid + 1;
        }else if(elementToFind < arr[mid]){
            end = mid - 1;
        }
    }
    return position;
}

void outputPosition(int position){
    if(position == INT_MIN)
        cout<<"Element Not Found"<<endl;
    else
        cout<<"Element Found At Position "<<position + 1<<endl; 
}

int main() {
    // Binary Search

    int n;
    cin>>n;

    int arr[n];

    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    cin>>elementToFind;

    int start = 0, end = n-1, position = INT_MIN;
    
    int lowerBoundPosition = lowerBoundBinarySeach(arr, start, end);
    int binarySearchPosition = binarySearch(arr, start, end);
    int upperBoundPosition =  upperBoundBinarySearch(arr, start, end);

    cout<<"LOWER BOUND"<<endl;
    outputPosition(lowerBoundPosition);       
    cout<<"BINARY SEARCH"<<endl;
    outputPosition(binarySearchPosition);       
    cout<<"UPPER BOUND"<<endl;
    outputPosition(upperBoundPosition);       

    return 0;
}
