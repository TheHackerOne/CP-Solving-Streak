#include<bits/stdc++.h>
using namespace std;

class BinaryTreeNode {
public:
    int data;
    BinaryTreeNode *left;
    BinaryTreeNode *right;

    BinaryTreeNode(int data) {
        this -> data = data;
        left = NULL;
        right = NULL;
    }

    ~BinaryTreeNode() {
        delete left;
        delete right;
    }
};

class BST {
    BinaryTreeNode *root;

public:

    BST() {
        root = NULL;
    }

    ~BST() {
        delete root;
    }

private:

    bool hasData(BinaryTreeNode *root , int data) {
        if (root == NULL)  return false;
        if (root -> data == data)  return true;
        if (data < root -> data) return hasData(root -> left, data);
        else return hasData(root -> right, data);
    }

    BinaryTreeNode *insertDataHelper(BinaryTreeNode *root, int data) {
        if (root == NULL) {
            BinaryTreeNode *newNode = new BinaryTreeNode(data);
            return newNode;
        }
        if (data < root -> data) {
            root -> left = insertDataHelper(root -> left, data);
        } else {
            root -> right = insertDataHelper(root -> right, data);
        }

        return root;
    }

    BinaryTreeNode *deleteDataHelper(BinaryTreeNode *root, int data) {
        if (root == NULL)
            return NULL;
        if (data < root -> data) {
            root -> left = deleteDataHelper(root -> left, data);
            return root;
        } else if (data > root -> data) {
            root -> right = deleteDataHelper(root -> right, data);
            return root;
        } else {
            if (root -> left == NULL && root -> right == NULL) {
                delete root;
                return NULL;
            } else if (root -> left == NULL) {
                BinaryTreeNode *node = root -> right;
                root -> right = NULL;
                delete root;
                return node;
            } else if (root -> right == NULL) {
                BinaryTreeNode *node = root -> left;
                root -> left = NULL;
                delete root;
                return node;
            } else {
                BinaryTreeNode *temp = root -> right;
                while (temp -> left != NULL) {
                    temp = temp -> left;
                }
                root -> data = temp -> data;
                root -> right = deleteDataHelper(root -> right, temp -> data);
                return root;
            }
        }
    }

    void printTree(BinaryTreeNode *root) {
        if (root == NULL)
            return;
        cout << root -> data << " : ";
        if (root -> left != NULL) {
            cout << "L " << root -> left -> data << " ";
        } if (root -> right != NULL) {
            cout << "R " << root -> right -> data ;
        }
        cout << endl;
        printTree(root -> left);
        printTree(root -> right);
    }

public:

    bool hasData(int data) {
        return hasData(root, data);
    }

    void insert(int data) {
        this -> root = insertDataHelper(root, data);
    }

    void deleteData(int data) {
        this -> root = deleteDataHelper(root, data);
    }

    void printTree() {
        printTree(root);
    }
};

int main() {
    BST b;
    b.insert(10);
    b.insert(5);
    b.insert(20);
    b.insert(7);
    b.insert(3);
    b.insert(15);
    b.printTree();
    b.deleteData(10);
    b.deleteData(100);
    cout << endl;
    b.printTree();

    return 0;
}