#include <iostream>
#include <bits/stdc++.h>

using namespace std;

class BinaryTreeNode{
    public:
    int data;
    BinaryTreeNode *left;
    BinaryTreeNode *right;

    BinaryTreeNode(int data){
        this -> data = data;
        left = NULL;
        right = NULL;
    }

    ~BinaryTreeNode(){
        delete left;
        delete right;
    }
};

BinaryTreeNode *TakeInput(){
    int data;
    cin>>data;
    BinaryTreeNode *root = new BinaryTreeNode(data);
    queue<BinaryTreeNode *> pendingNodes;
    pendingNodes.push(root);
    while(!pendingNodes.empty()){
        BinaryTreeNode *front = pendingNodes.front();
        pendingNodes.pop();
        int left, right;
        cout<<"Enter left child of "<<front -> data<<endl;
        cin>>left;
        if(left != -1){
            BinaryTreeNode *newNode = new BinaryTreeNode(left);
            pendingNodes.push(newNode);
            front -> left = newNode;
        }
        cout<<"Enter right child of "<<front -> data<<endl;
        cin>>right;
        if(right != -1){
            BinaryTreeNode *newNode = new BinaryTreeNode(right);
            pendingNodes.push(newNode);
            front -> right = newNode;
        }
    }
    return root;
}

BinaryTreeNode *printPathToNodeBinaryTree(BinaryTreeNode *root, int element){
    if(root == NULL)
        return NULL;
    if(root -> data == element) {
        cout<<root -> data<<" ";
        return root;
    }
        
     BinaryTreeNode *leftAns = printPathToNodeBinaryTree(root -> left, element);      
     BinaryTreeNode *rightAns = printPathToNodeBinaryTree(root -> right, element); 
     if(leftAns != NULL || rightAns != NULL){
         cout<<root -> data<<" "; 
         return root;
     }else{
         return NULL;
     }            
}

int main() {
    BinaryTreeNode *root = TakeInput();
    int element = 13;
    BinaryTreeNode *ans = printPathToNodeBinaryTree(root, element);
    if(ans == NULL)
        cout<<"Element Not Found"<<endl;

    return 0;
}
